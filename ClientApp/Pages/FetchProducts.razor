@page "/fetchproducts"
@using System.Net.Http.Json
@using System.Text.Json
@inject HttpClient Http

<h3>Product List</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (products == null)
{
    <p><em>Loading...</em></p>
}
else if (products.Length == 0)
{
    <p>No products available.</p>
}
else
{
    <ul>
        @foreach (var product in products)
        {
            <li>
                @product.Name - $@product.Price (Stock: @product.Stock)
                <br />
                Category: @product.Category?.Name
            </li>
        }
    </ul>
}

@code {
    private Product[]? products;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));

            // Copilot suggested using GetFromJsonAsync for simplicity
            products = await Http.GetFromJsonAsync<Product[]>("http://localhost:5286/api/productlist", cts.Token);

            if (products == null)
            {
                errorMessage = "Server returned empty or invalid data.";
            }
        }
        catch (TaskCanceledException)
        {
            errorMessage = "Request timed out. Please try again.";
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Network error: {ex.Message}";
        }
        catch (JsonException ex)
        {
            errorMessage = $"Error parsing JSON: {ex.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error: {ex.Message}";
        }
    }

    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public double Price { get; set; }
        public int Stock { get; set; }
        public Category? Category { get; set; }
    }

    public class Category
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }
}
