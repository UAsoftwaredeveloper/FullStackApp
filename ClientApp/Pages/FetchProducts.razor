@page "/fetchproducts"
@using ClientApp.Models
@inject ClientApp.Services.IProductService ProductService

<h3>Product List</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (products == null)
{
    <p><em>Loading...</em></p>
}
else if (products.Length == 0)
{
    <p>No products available.</p>
}
else
{
    <ul>
        @foreach (var product in products)
        {
            <li>
                @product.Name - $@product.Price (Stock: @product.Stock)
                <br />
                Category: @product.Category?.Name
            </li>
        }
    </ul>
}

@code {
    private Product[]? products;
    private string? errorMessage;
    private bool isLoading;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        errorMessage = null;
        try
        {
            products = await ProductService.GetProductsAsync(ct: CancellationToken.None);
            if (products == null || products.Length == 0)
            {
                // allow UI to show 'No products available.' when array empty
                products ??= Array.Empty<Product>();
            }
        }
        catch (TaskCanceledException)
        {
            errorMessage = "Request timed out. Please try again.";
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Network error: {ex.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshAsync()
    {
        isLoading = true;
        errorMessage = null;
        try
        {
            products = await ProductService.GetProductsAsync(forceRefresh: true);
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to refresh: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    // Models moved to ClientApp.Models.Product
}
